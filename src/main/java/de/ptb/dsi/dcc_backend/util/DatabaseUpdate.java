package de.ptb.dsi.dcc_backend.util;

import de.ptb.dsi.dcc_backend.model.Dcc;
import de.ptb.dsi.dcc_backend.repository.DccRepository;
import lombok.AllArgsConstructor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;



@Component
@AllArgsConstructor
public class DatabaseUpdate implements CommandLineRunner {
    private DccRepository dccRepository;

    @Override
    public void run(String... args) throws Exception {
        Dcc dccNpl= new Dcc();
        dccNpl.setPid("CCM.M-K1-NPL9507");
        dccNpl.setDccValid(true);
        dccNpl.setXmlBase64("");
        dccRepository.save(dccNpl);

        Dcc dccPTB= new Dcc();
        dccPTB.setPid("CCM.M-K1-PTB9608");
        dccPTB.setDccValid(true);
        dccPTB.setXmlBase64("");
        dccRepository.save(dccPTB);

        Dcc dccBIPM= new Dcc();
        dccBIPM.setPid("CCM.M-K1-BIPM9502");
        dccBIPM.setDccValid(true);
        dccBIPM.setXmlBase64("");
        dccRepository.save(dccBIPM);

        Dcc dccKriss= new Dcc();
        dccKriss.setPid("CCM.M-K1-KRISS9703");
        dccKriss.setDccValid(true);
        dccKriss.setXmlBase64("");
        dccRepository.save(dccKriss);

    }
}
